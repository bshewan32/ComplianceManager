import React, { useState, useEffect } from 'react';
import { Upload, FileText, Settings, Search, AlertCircle, CheckCircle, FolderOpen, RefreshCw, Plus } from 'lucide-react';

const API_BASE = 'http://localhost:8000/api';

export default function ComplianceManager() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [standards, setStandards] = useState([]);
  const [selectedStandard, setSelectedStandard] = useState(null);
  const [clauses, setClauses] = useState([]);
  const [complianceScore, setComplianceScore] = useState(null);
  const [aiConfig, setAiConfig] = useState({ provider: '', apiKey: '', modelName: '' });
  const [scanning, setScanning] = useState(false);

  useEffect(() => {
    fetchStandards();
  }, []);

  useEffect(() => {
    if (selectedStandard) {
      fetchStandardDetails(selectedStandard.id);
      fetchComplianceScore(selectedStandard.id);
    }
  }, [selectedStandard]);

  const fetchStandards = async () => {
    try {
      const response = await fetch(`${API_BASE}/standards`);
      const data = await response.json();
      setStandards(data);
      if (data.length > 0 && !selectedStandard) {
        setSelectedStandard(data[0]);
      }
    } catch (error) {
      console.error('Error fetching standards:', error);
    }
  };

  const fetchStandardDetails = async (standardId) => {
    try {
      const response = await fetch(`${API_BASE}/standards/${standardId}`);
      const data = await response.json();
      setClauses(data.clauses || []);
    } catch (error) {
      console.error('Error fetching standard details:', error);
    }
  };

  const fetchComplianceScore = async (standardId) => {
    try {
      const response = await fetch(`${API_BASE}/compliance-score/${standardId}`);
      const data = await response.json();
      setComplianceScore(data);
    } catch (error) {
      console.error('Error fetching compliance score:', error);
    }
  };

  const handleScanFolder = async () => {
    if (!selectedStandard) {
      alert('Please select a standard first');
      return;
    }

    const folderPath = prompt('Enter folder path to scan:');
    if (!folderPath) return;

    setScanning(true);
    try {
      const response = await fetch(`${API_BASE}/scan`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          standard_id: selectedStandard.id,
          folder_path: folderPath
        })
      });
      
      if (response.ok) {
        alert('Scan started! This may take a few minutes for large folders.');
        setTimeout(() => {
          fetchComplianceScore(selectedStandard.id);
          setScanning(false);
        }, 5000);
      }
    } catch (error) {
      console.error('Error scanning folder:', error);
      setScanning(false);
    }
  };

  const handleSaveAIConfig = async () => {
    try {
      await fetch(`${API_BASE}/ai-config`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          provider: aiConfig.provider,
          api_key: aiConfig.apiKey,
          model_name: aiConfig.modelName
        })
      });
      alert('AI configuration saved successfully');
    } catch (error) {
      console.error('Error saving AI config:', error);
    }
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBgColor = (score) => {
    if (score >= 80) return 'bg-green-100';
    if (score >= 60) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <FileText className="w-8 h-8 text-blue-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Compliance Document Manager</h1>
                <p className="text-sm text-gray-600">Automated compliance tracking and management</p>
              </div>
            </div>
            <div className="flex gap-2">
              <select 
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                value={selectedStandard?.id || ''}
                onChange={(e) => {
                  const std = standards.find(s => s.id === parseInt(e.target.value));
                  setSelectedStandard(std);
                }}
              >
                {standards.map(std => (
                  <option key={std.id} value={std.id}>{std.name}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4">
          <nav className="flex gap-6">
            {['dashboard', 'documents', 'scan', 'settings'].map(tab => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-3 border-b-2 font-medium transition-colors capitalize ${
                  activeTab === tab 
                    ? 'border-blue-500 text-blue-600' 
                    : 'border-transparent text-gray-600 hover:text-gray-900'
                }`}
              >
                {tab}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            {/* Compliance Score Card */}
            {complianceScore && (
              <div className="bg-white rounded-lg shadow-lg p-6">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">Compliance Overview</h2>
                  <button
                    onClick={() => fetchComplianceScore(selectedStandard.id)}
                    className="flex items-center gap-2 px-4 py-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                  >
                    <RefreshCw className="w-4 h-4" />
                    Refresh
                  </button>
                </div>

                {/* Overall Score */}
                <div className={`${getScoreBgColor(complianceScore.overall_score)} rounded-lg p-6 mb-6`}>
                  <div className="text-center">
                    <div className={`text-6xl font-bold ${getScoreColor(complianceScore.overall_score)}`}>
                      {complianceScore.overall_score}%
                    </div>
                    <div className="text-gray-700 mt-2 font-medium">Overall Compliance Score</div>
                    <div className="text-sm text-gray-600 mt-1">
                      {complianceScore.compliant_clauses} of {complianceScore.total_clauses} clauses compliant
                    </div>
                  </div>
                </div>

                {/* Element Scores */}
                <div className="mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Element Scores</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {Object.entries(complianceScore.element_scores).map(([element, score]) => (
                      <div key={element} className="bg-gray-50 rounded-lg p-4">
                        <div className="text-sm text-gray-600 mb-1">Element {element}</div>
                        <div className={`text-3xl font-bold ${getScoreColor(score)}`}>
                          {score}%
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Missing Documents */}
                {complianceScore.missing_documents.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                      <AlertCircle className="w-5 h-5 text-red-500" />
                      Missing Documents ({complianceScore.missing_documents.length})
                    </h3>
                    <div className="space-y-2">
                      {complianceScore.missing_documents.map((doc, idx) => (
                        <div key={idx} className="bg-red-50 border border-red-200 rounded-lg p-4">
                          <div className="font-medium text-gray-900">{doc.clause_number}: {doc.title}</div>
                          <div className="text-sm text-gray-600 mt-1">Weight: {doc.weight}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'documents' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Document Library</h2>
              
              {clauses.length === 0 ? (
                <div className="text-center py-12 text-gray-500">
                  <FileText className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                  <p>No clauses found for this standard.</p>
                  <p className="text-sm mt-2">Add clauses to begin tracking documents.</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {clauses.map(clause => (
                    <ClauseItem key={clause.id} clause={clause} />
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'scan' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Scan Documents</h2>
              
              <div className="space-y-4">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                  <div className="flex items-start gap-4">
                    <FolderOpen className="w-8 h-8 text-blue-600 flex-shrink-0" />
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 mb-2">Scan for Compliance Documents</h3>
                      <p className="text-sm text-gray-600 mb-4">
                        Point to a folder containing your compliance documents. The system will automatically 
                        scan and map documents to the appropriate clauses based on filenames and content.
                      </p>
                      <button
                        onClick={handleScanFolder}
                        disabled={scanning || !selectedStandard}
                        className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                      >
                        {scanning ? (
                          <>
                            <RefreshCw className="w-5 h-5 animate-spin" />
                            Scanning...
                          </>
                        ) : (
                          <>
                            <Search className="w-5 h-5" />
                            Start Scan
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-50 rounded-lg p-6">
                  <h3 className="font-semibold text-gray-900 mb-3">Supported File Types</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                    {['PDF', 'Word (DOC/DOCX)', 'Excel (XLS/XLSX)', 'PowerPoint (PPT/PPTX)', 
                      'Images (JPG/PNG)'].map(type => (
                      <div key={type} className="flex items-center gap-2">
                        <CheckCircle className="w-4 h-4 text-green-600" />
                        <span>{type}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <p className="text-sm text-gray-700">
                    <strong>Note:</strong> The initial scan may take several minutes for folders with 
                    thousands of documents. The system will continue monitoring the folder for changes 
                    and automatically update when new files are added or modified.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">AI Configuration</h2>
              
              <div className="space-y-4 max-w-2xl">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    AI Provider
                  </label>
                  <select
                    value={aiConfig.provider}
                    onChange={(e) => setAiConfig({...aiConfig, provider: e.target.value})}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select Provider</option>
                    <option value="openai">OpenAI (ChatGPT)</option>
                    <option value="google">Google (Gemini)</option>
                    <option value="deepseek">DeepSeek</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    API Key
                  </label>
                  <input
                    type="password"
                    value={aiConfig.apiKey}
                    onChange={(e) => setAiConfig({...aiConfig, apiKey: e.target.value})}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter your API key"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Model Name (Optional)
                  </label>
                  <input
                    type="text"
                    value={aiConfig.modelName}
                    onChange={(e) => setAiConfig({...aiConfig, modelName: e.target.value})}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., gpt-4, gemini-pro"
                  />
                </div>

                <button
                  onClick={handleSaveAIConfig}
                  disabled={!aiConfig.provider || !aiConfig.apiKey}
                  className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                >
                  <Settings className="w-5 h-5" />
                  Save Configuration
                </button>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-6">
                  <p className="text-sm text-gray-700">
                    <strong>AI Features:</strong> Once configured, you can use AI to generate missing 
                    documents, suggest improvements to existing documents, and receive recommendations 
                    for achieving better compliance scores.
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Quick Setup</h2>
              <SetupWizard standards={standards} onComplete={fetchStandards} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function ClauseItem({ clause }) {
  const [documents, setDocuments] = useState([]);
  const [expanded, setExpanded] = useState(false);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    if (expanded) {
      fetchDocuments();
    }
  }, [expanded]);

  const fetchDocuments = async () => {
    try {
      const response = await fetch(`${API_BASE}/clauses/${clause.id}/documents`);
      const data = await response.json();
      setDocuments(data);
    } catch (error) {
      console.error('Error fetching documents:', error);
    }
  };

  const handleUpload = async (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setUploading(true);
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch(`${API_BASE}/documents/upload?clause_id=${clause.id}`, {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        alert('Document uploaded successfully');
        fetchDocuments();
      }
    } catch (error) {
      console.error('Error uploading document:', error);
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="border border-gray-200 rounded-lg overflow-hidden">
      <button
        onClick={() => setExpanded(!expanded)}
        className="w-full flex items-center justify-between p-4 hover:bg-gray-50 transition-colors"
      >
        <div className="flex items-center gap-3">
          <div className="font-semibold text-gray-900">{clause.clause_number}</div>
          <div className="text-gray-700">{clause.title}</div>
        </div>
        <div className="flex items-center gap-3">
          <span className="text-sm text-gray-500">Weight: {clause.weight}</span>
          <span className={`text-2xl transform transition-transform ${expanded ? 'rotate-180' : ''}`}>
            ▼
          </span>
        </div>
      </button>

      {expanded && (
        <div className="border-t border-gray-200 p-4 bg-gray-50">
          {clause.description && (
            <p className="text-sm text-gray-600 mb-4">{clause.description}</p>
          )}

          <div className="flex items-center justify-between mb-4">
            <h4 className="font-medium text-gray-900">Documents ({documents.length})</h4>
            <label className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer transition-colors">
              <Upload className="w-4 h-4" />
              {uploading ? 'Uploading...' : 'Upload'}
              <input
                type="file"
                onChange={handleUpload}
                disabled={uploading}
                className="hidden"
              />
            </label>
          </div>

          {documents.length === 0 ? (
            <p className="text-sm text-gray-500 italic">No documents found</p>
          ) : (
            <div className="space-y-2">
              {documents.map(doc => (
                <div key={doc.id} className="bg-white border border-gray-200 rounded p-3 flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <FileText className="w-5 h-5 text-gray-400" />
                    <div>
                      <div className="font-medium text-sm">{doc.file_name}</div>
                      <div className="text-xs text-gray-500">
                        {doc.document_type} • {doc.revision_count} revision(s)
                      </div>
                    </div>
                  </div>
                  <button className="text-blue-600 hover:text-blue-700 text-sm">
                    View
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

function SetupWizard({ standards, onComplete }) {
  const [newStandard, setNewStandard] = useState({ name: '', version: '', description: '' });
  const [showForm, setShowForm] = useState(false);

  const handleCreateStandard = async () => {
    if (!newStandard.name) {
      alert('Please enter a standard name');
      return;
    }

    try {
      const response = await fetch(`${API_BASE}/standards`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newStandard)
      });

      if (response.ok) {
        alert('Standard created successfully');
        setNewStandard({ name: '', version: '', description: '' });
        setShowForm(false);
        onComplete();
      }
    } catch (error) {
      console.error('Error creating standard:', error);
    }
  };

  return (
    <div className="space-y-4">
      {!showForm ? (
        <button
          onClick={() => setShowForm(true)}
          className="flex items-center gap-2 px-4 py-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
        >
          <Plus className="w-5 h-5" />
          Add New Standard
        </button>
      ) : (
        <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
          <input
            type="text"
            placeholder="Standard Name (e.g., ISO 45001)"
            value={newStandard.name}
            onChange={(e) => setNewStandard({...newStandard, name: e.target.value})}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg"
          />
          <input
            type="text"
            placeholder="Version (optional)"
            value={newStandard.version}
            onChange={(e) => setNewStandard({...newStandard, version: e.target.value})}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg"
          />
          <textarea
            placeholder="Description (optional)"
            value={newStandard.description}
            onChange={(e) => setNewStandard({...newStandard, description: e.target.value})}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg"
            rows={3}
          />
          <div className="flex gap-2">
            <button
              onClick={handleCreateStandard}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Create
            </button>
            <button
              onClick={() => setShowForm(false)}
              className="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
}